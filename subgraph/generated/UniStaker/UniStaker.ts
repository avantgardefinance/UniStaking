// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BeneficiaryAltered extends ethereum.Event {
  get params(): BeneficiaryAltered__Params {
    return new BeneficiaryAltered__Params(this);
  }
}

export class BeneficiaryAltered__Params {
  _event: BeneficiaryAltered;

  constructor(event: BeneficiaryAltered) {
    this._event = event;
  }

  get depositId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldBeneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newBeneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateeAltered extends ethereum.Event {
  get params(): DelegateeAltered__Params {
    return new DelegateeAltered__Params(this);
  }
}

export class DelegateeAltered__Params {
  _event: DelegateeAltered;

  constructor(event: DelegateeAltered) {
    this._event = event;
  }

  get depositId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldDelegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDelegatee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardNotified extends ethereum.Event {
  get params(): RewardNotified__Params {
    return new RewardNotified__Params(this);
  }
}

export class RewardNotified__Params {
  _event: RewardNotified;

  constructor(event: RewardNotified) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StakeDeposited extends ethereum.Event {
  get params(): StakeDeposited__Params {
    return new StakeDeposited__Params(this);
  }
}

export class StakeDeposited__Params {
  _event: StakeDeposited;

  constructor(event: StakeDeposited) {
    this._event = event;
  }

  get depositId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalDeposited(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get depositId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SurrogateDeployed extends ethereum.Event {
  get params(): SurrogateDeployed__Params {
    return new SurrogateDeployed__Params(this);
  }
}

export class SurrogateDeployed__Params {
  _event: SurrogateDeployed;

  constructor(event: SurrogateDeployed) {
    this._event = event;
  }

  get delegatee(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get surrogate(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UniStaker__depositsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getBalance(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getDelegatee(): Address {
    return this.value2;
  }

  getBeneficiary(): Address {
    return this.value3;
  }
}

export class UniStaker extends ethereum.SmartContract {
  static bind(address: Address): UniStaker {
    return new UniStaker("UniStaker", address);
  }

  REWARDS_NOTIFIER(): Address {
    let result = super.call(
      "REWARDS_NOTIFIER",
      "REWARDS_NOTIFIER():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_REWARDS_NOTIFIER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "REWARDS_NOTIFIER",
      "REWARDS_NOTIFIER():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REWARDS_TOKEN(): Address {
    let result = super.call("REWARDS_TOKEN", "REWARDS_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_REWARDS_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "REWARDS_TOKEN",
      "REWARDS_TOKEN():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REWARD_DURATION(): BigInt {
    let result = super.call(
      "REWARD_DURATION",
      "REWARD_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REWARD_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_DURATION",
      "REWARD_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STAKE_TOKEN(): Address {
    let result = super.call("STAKE_TOKEN", "STAKE_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_STAKE_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("STAKE_TOKEN", "STAKE_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposits(depositId: BigInt): UniStaker__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(uint256):(uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(depositId)],
    );

    return new UniStaker__depositsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
    );
  }

  try_deposits(
    depositId: BigInt,
  ): ethereum.CallResult<UniStaker__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(depositId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniStaker__depositsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
      ),
    );
  }

  earned(_beneficiary: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(_beneficiary),
    ]);

    return result[0].toBigInt();
  }

  try_earned(_beneficiary: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(_beneficiary),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earningPower(beneficiary: Address): BigInt {
    let result = super.call("earningPower", "earningPower(address):(uint256)", [
      ethereum.Value.fromAddress(beneficiary),
    ]);

    return result[0].toBigInt();
  }

  try_earningPower(beneficiary: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earningPower",
      "earningPower(address):(uint256)",
      [ethereum.Value.fromAddress(beneficiary)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finishAt(): BigInt {
    let result = super.call("finishAt", "finishAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_finishAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("finishAt", "finishAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTimeRewardApplicable(): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(account: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_rewards(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stake(_amount: BigInt, _delegatee: Address): BigInt {
    let result = super.call("stake", "stake(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromAddress(_delegatee),
    ]);

    return result[0].toBigInt();
  }

  try_stake(_amount: BigInt, _delegatee: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromAddress(_delegatee),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stake1(_amount: BigInt, _delegatee: Address, _beneficiary: Address): BigInt {
    let result = super.call(
      "stake",
      "stake(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_delegatee),
        ethereum.Value.fromAddress(_beneficiary),
      ],
    );

    return result[0].toBigInt();
  }

  try_stake1(
    _amount: BigInt,
    _delegatee: Address,
    _beneficiary: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stake",
      "stake(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_delegatee),
        ethereum.Value.fromAddress(_beneficiary),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  surrogates(delegatee: Address): Address {
    let result = super.call("surrogates", "surrogates(address):(address)", [
      ethereum.Value.fromAddress(delegatee),
    ]);

    return result[0].toAddress();
  }

  try_surrogates(delegatee: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("surrogates", "surrogates(address):(address)", [
      ethereum.Value.fromAddress(delegatee),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDeposits(depositor: Address): BigInt {
    let result = super.call(
      "totalDeposits",
      "totalDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(depositor)],
    );

    return result[0].toBigInt();
  }

  try_totalDeposits(depositor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(depositor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatedAt(): BigInt {
    let result = super.call("updatedAt", "updatedAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_updatedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("updatedAt", "updatedAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(account: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardsNotifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AlterBeneficiaryCall extends ethereum.Call {
  get inputs(): AlterBeneficiaryCall__Inputs {
    return new AlterBeneficiaryCall__Inputs(this);
  }

  get outputs(): AlterBeneficiaryCall__Outputs {
    return new AlterBeneficiaryCall__Outputs(this);
  }
}

export class AlterBeneficiaryCall__Inputs {
  _call: AlterBeneficiaryCall;

  constructor(call: AlterBeneficiaryCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AlterBeneficiaryCall__Outputs {
  _call: AlterBeneficiaryCall;

  constructor(call: AlterBeneficiaryCall) {
    this._call = call;
  }
}

export class AlterDelegateeCall extends ethereum.Call {
  get inputs(): AlterDelegateeCall__Inputs {
    return new AlterDelegateeCall__Inputs(this);
  }

  get outputs(): AlterDelegateeCall__Outputs {
    return new AlterDelegateeCall__Outputs(this);
  }
}

export class AlterDelegateeCall__Inputs {
  _call: AlterDelegateeCall;

  constructor(call: AlterDelegateeCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newDelegatee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AlterDelegateeCall__Outputs {
  _call: AlterDelegateeCall;

  constructor(call: AlterDelegateeCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class NotifyRewardsAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardsAmountCall__Inputs {
    return new NotifyRewardsAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardsAmountCall__Outputs {
    return new NotifyRewardsAmountCall__Outputs(this);
  }
}

export class NotifyRewardsAmountCall__Inputs {
  _call: NotifyRewardsAmountCall;

  constructor(call: NotifyRewardsAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyRewardsAmountCall__Outputs {
  _call: NotifyRewardsAmountCall;

  constructor(call: NotifyRewardsAmountCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _delegatee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Stake1Call extends ethereum.Call {
  get inputs(): Stake1Call__Inputs {
    return new Stake1Call__Inputs(this);
  }

  get outputs(): Stake1Call__Outputs {
    return new Stake1Call__Outputs(this);
  }
}

export class Stake1Call__Inputs {
  _call: Stake1Call;

  constructor(call: Stake1Call) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _delegatee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class Stake1Call__Outputs {
  _call: Stake1Call;

  constructor(call: Stake1Call) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeMoreCall extends ethereum.Call {
  get inputs(): StakeMoreCall__Inputs {
    return new StakeMoreCall__Inputs(this);
  }

  get outputs(): StakeMoreCall__Outputs {
    return new StakeMoreCall__Outputs(this);
  }
}

export class StakeMoreCall__Inputs {
  _call: StakeMoreCall;

  constructor(call: StakeMoreCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeMoreCall__Outputs {
  _call: StakeMoreCall;

  constructor(call: StakeMoreCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
